//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     //
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.xmlws.org/accommodationservice/gen", ConfigurationName="TestServiceReference.AccommodationPort")]
    public interface AccommodationPort
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<TestServiceReference.getAccommodationResponse1> getAccommodationAsync(TestServiceReference.getAccommodationRequest1 request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.xmlws.org/accommodationservice/gen")]
    public partial class getAccommodationRequest
    {
        
        private string nameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType=true, Namespace="http://www.xmlws.org/accommodationservice/gen")]
    public partial class getAccommodationResponse
    {
        
        private string accommodationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string accommodation
        {
            get
            {
                return this.accommodationField;
            }
            set
            {
                this.accommodationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getAccommodationRequest1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xmlws.org/accommodationservice/gen", Order=0)]
        public TestServiceReference.getAccommodationRequest getAccommodationRequest;
        
        public getAccommodationRequest1()
        {
        }
        
        public getAccommodationRequest1(TestServiceReference.getAccommodationRequest getAccommodationRequest)
        {
            this.getAccommodationRequest = getAccommodationRequest;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class getAccommodationResponse1
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://www.xmlws.org/accommodationservice/gen", Order=0)]
        public TestServiceReference.getAccommodationResponse getAccommodationResponse;
        
        public getAccommodationResponse1()
        {
        }
        
        public getAccommodationResponse1(TestServiceReference.getAccommodationResponse getAccommodationResponse)
        {
            this.getAccommodationResponse = getAccommodationResponse;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public interface AccommodationPortChannel : TestServiceReference.AccommodationPort, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil", "1.0.0.1")]
    public partial class AccommodationPortClient : System.ServiceModel.ClientBase<TestServiceReference.AccommodationPort>, TestServiceReference.AccommodationPort
    {
        
    /// <summary>
    /// Implement this partial method to configure the service endpoint.
    /// </summary>
    /// <param name="serviceEndpoint">The endpoint to configure</param>
    /// <param name="clientCredentials">The client credentials</param>
    static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public AccommodationPortClient() : 
                base(AccommodationPortClient.GetDefaultBinding(), AccommodationPortClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.AccommodationPortSoap11.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccommodationPortClient(EndpointConfiguration endpointConfiguration) : 
                base(AccommodationPortClient.GetBindingForEndpoint(endpointConfiguration), AccommodationPortClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccommodationPortClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(AccommodationPortClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccommodationPortClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(AccommodationPortClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public AccommodationPortClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<TestServiceReference.getAccommodationResponse1> TestServiceReference.AccommodationPort.getAccommodationAsync(TestServiceReference.getAccommodationRequest1 request)
        {
            return base.Channel.getAccommodationAsync(request);
        }
        
        public System.Threading.Tasks.Task<TestServiceReference.getAccommodationResponse1> getAccommodationAsync(TestServiceReference.getAccommodationRequest getAccommodationRequest)
        {
            TestServiceReference.getAccommodationRequest1 inValue = new TestServiceReference.getAccommodationRequest1();
            inValue.getAccommodationRequest = getAccommodationRequest;
            return ((TestServiceReference.AccommodationPort)(this)).getAccommodationAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AccommodationPortSoap11))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.AccommodationPortSoap11))
            {
                return new System.ServiceModel.EndpointAddress("http://localhost:8081/ws");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return AccommodationPortClient.GetBindingForEndpoint(EndpointConfiguration.AccommodationPortSoap11);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return AccommodationPortClient.GetEndpointAddress(EndpointConfiguration.AccommodationPortSoap11);
        }
        
        public enum EndpointConfiguration
        {
            
            AccommodationPortSoap11,
        }
    }
}
